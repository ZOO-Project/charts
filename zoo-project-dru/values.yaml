# Default values for zoo-project-dru.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.


imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""


useKubeProxy: true
clusterAdminRoleName: cluster-admin

podAnnotations: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  # `hosturl` provides the opportunuity to specify the service URL when ingress is provided
  # external to this helm chart. If ingress is enabled then the service URL can be taken
  # from `ingress.hosts.host[0]`.
  # Thus, the value of the service URL is deduced in the following order of priority...
  #   * `ingress.hosturl`
  #   * `ingress.hosts.host[0]` if `ingress.enabled: true`
  #   * `http://localhost:8080` if all else fails
  # hosturl: https://myzoo.example.com
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: nginx
  # kubernetes.io/tls-acme: "true"
  hosts:
  - host: chart-example.local
    paths:
    - path: /
      pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

zoo:
  rabbitmq:
    definitions: "files/rabbitmq/definitions.json"

zoofpm:
  image:
    repository: zooproject/zoo-project
    pullPolicy: IfNotPresent
    tag: dru-52999310861d654848bd4c6005331d519616bead
  autoscaling:
    enabled: false
  replicaCount: 1
  extraMountPoints: []

zookernel:
  env: {}
    # ZOO_OUTPUT_FORMAT: stac-collection
  image:
    repository: zooproject/zoo-project
    pullPolicy: IfNotPresent
    tag: dru-52999310861d654848bd4c6005331d519616bead
  extraMountPoints: []

workflow:
  storageClass: standard
  defaultVolumeSize: "10190"
  defaultMaxRam: "1024"
  defaultMaxCores: "2"
  calrissianImage: "terradue/calrissian:0.12.0"
  imagePullSecrets: {}
  # auths:
  #  fake\.registry\.io:
  #    username: fakeuser
  #    password: fakepassword
  #    email: fakeuser@fake.registry.io
  #    auth: ""
  additionalImagePullSecrets: []
  nodeSelector: {}
  env: {}
  inputs: {}
  additionalInputs: {}
  argo:
    enabled: true
    storageClass: standard
    defaultVolumeSize: "12Gi"
    defaultMaxRam: "2Gi"
    wfServer: "http://argo-server.ns1.svc.cluster.local:2746"
    wfToken: "aaaabbbbccccdddd"
    wfSynchronizationCm: "semaphore-argo-cwl-runner-stage-in-out"
    CwlRunnerTemplare: "argo-cwl-runner-stage-in-out"
    CwlRunnerEndpoint: "calrissian-runner"
    
postgresql:
  defineEnvironmentVariables: false
  enabled: true
  primary:
    initdb:
      scriptsConfigMap: "postgresql-primary-init-scripts"

global:
  postgresql:
    auth:
      username: zoo
      password: zoo
      database: zoo

    service:
      ports:
        postgresql: "5432"

# rabbitmq
rabbitmq:
  auth:
    username: RABBITMQ_USERNAME
    password: CHANGEME
  loadDefinition:
    enabled: true
    existingSecret: load-definition
  extraConfiguration: |
    load_definitions = /app/load_definition.json

persistence:
  enabled: true
  # existingUserDataClaim:
  # existingProcServicesClaim:
  ## @param persistence.storageClass Storage class of backing PVC
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: ""
  userDataAccessMode: ReadWriteOnce
  userDataSize: 10Gi

  ## @param persistence.procServicesAccessMode Access mode of the PVC
  procServicesAccessMode: ReadWriteMany
  ## @param persistence.procServicesStorageClass Storage class of backing PVC
  ## require ReadWriteMany access mode
  procServicesStorageClass: standard
  procServicesSize: 5Gi
  ## @param persistence.tmpPath Path to mount the PVC
  servicesNamespacePath: /opt/zooservices_user

  ## @param persistence.tmpAccessMode Access mode of the PVC
  tmpAccessMode: ReadWriteMany
  ## @param persistence.tmpStorageClass Storage class of backing PVC
  ## require ReadWriteMany access mode
  tmpStorageClass: standard
  ## @param persistence.tmpSize Size of the PVC
  tmpSize: 2Gi
  ## @param persistence.tmpPath Path to mount the PVC
  tmpPath: /tmp/zTmp

cookiecutter:
  templateUrl: https://github.com/EOEPCA/eoepca-proc-service-template.git
  templateBranch: feature/python3.8

minio:
  enabled: false

websocketd:
  enabled: false

redis: 
  enabled: false
  replica:
    replicaCount: 1
  auth:
    enabled: false

iam: 
  enabled: true
  openIdConnectUrl: https://testbed19.geolabs.fr:8099/realms/ZOO_DEMO/.well-known/openid-configuration
  type: openIdConnect
  name: OpenIDAuth
  realm: Secured section

documentation:
  enabled: false

filter_in:
  enabled: true
  path: /usr/lib/cgi-bin
  service: securityIn

filter_out:
  enabled: true
  path: /usr/lib/cgi-bin
  service: securityOut

# Value overrides for the file assets included within the chart template.
files:
  # Directory `files/cwlwrapper-assets` - assets for ConfigMap `XXX-cwlwrapper-config`
  cwlwrapperAssets: {}
    # main.yaml: ""
    # rules.yaml: ""
    # stagein.yaml: ""
    # stageout.yaml: ""

# Provide custom contribution to the zoo configuration files.
customConfig:
  # file main.cfg
  main: {}
#
# Example - passing through custom config that can be accessed directly in a
# cookiecutter template that is provided as a deployment customisation.
# The cookiecutter must be coded to expect these passed-thru parameters by name,
# i.e. under the keys ["myCustomConfig"]["domain"], etc.
#
# ---
# customConfig:
#   main:
#     myCustomConfig: |-
#       domain=mycluster.myplatform
#       workspace_prefix=ws
#     moreCustomConfig: |-
#       something=some-data
#       otherthing=stuff