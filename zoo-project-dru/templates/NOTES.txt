üöÄ ZOO-Project DRU deployed successfully!
=========================================

üìç Main Application Access:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "zoo-project-dru.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "zoo-project-dru.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "zoo-project-dru.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  {{- if .Values.websocketd.enabled }}
  export POD_WS_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "zoo-project-dru.name" . }}-websocketd,app.kubernetes.io/instance={{ .Release.Name }}-websocketd" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_WS_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_WS_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit ws://127.0.0.1:8888 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_WS_NAME 8888:$CONTAINER_WS_PORT &
  {{- end }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "zoo-project-dru.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

{{- if .Values.argo.enabled }}

üîß Argo Workflows Access:
{{- if .Values.argo.ingress.enabled }}
{{- range $host := .Values.argo.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.argo.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else }}
  kubectl port-forward -n {{ .Release.Namespace }} svc/{{ include "zoo-project-dru.fullname" . }}-argo-workflows-official-server 2746:2746
  Open: http://localhost:2746
{{- end }}

  # Check workflow status
  kubectl get workflows -n {{ .Release.Namespace }}
  
  # View workflow logs
  kubectl logs -n {{ .Release.Namespace }} -l workflows.argoproj.io/workflow=<workflow-name>

{{- end }}

{{- if .Values.minio.enabled }}
üì¶ MinIO Object Storage:
  kubectl port-forward -n {{ .Release.Namespace }} svc/s3-service 9001:9001
  Open: http://localhost:9001
  Username: {{ .Values.minio.rootUser | default "minioadmin" }}
  Password: (check secret s3-service)

  # Access MinIO credentials
  kubectl get secret s3-service -n {{ .Release.Namespace }} -o jsonpath='{.data.rootUser}' | base64 --decode
  kubectl get secret s3-service -n {{ .Release.Namespace }} -o jsonpath='{.data.rootPassword}' | base64 --decode

{{- end }}

{{- if .Values.monitoring.enabled }}

üìä Monitoring Services Access:
{{- if index .Values.monitoring "kube-prometheus-stack" "grafana" "enabled" | default true }}

üìà Grafana Dashboard:
  kubectl port-forward -n {{ .Release.Namespace }} svc/{{ include "zoo-project-dru.fullname" . }}-grafana 3000:80
  Open: http://localhost:3000
  Username: admin
  Password: kubectl get secret {{ include "zoo-project-dru.fullname" . }}-grafana -n {{ .Release.Namespace }} -o jsonpath='{.data.admin-password}' | base64 --decode
{{- end }}

{{- if index .Values.monitoring "kube-prometheus-stack" "prometheus" "enabled" | default true }}

üîç Prometheus Metrics:
  kubectl port-forward -n {{ .Release.Namespace }} svc/{{ include "zoo-project-dru.fullname" . }}-kube-prometheus-prometheus 9090:9090
  Open: http://localhost:9090
{{- end }}

{{- if index .Values.monitoring "kube-prometheus-stack" "alertmanager" "enabled" | default true }}

üö® AlertManager:
  kubectl port-forward -n {{ .Release.Namespace }} svc/{{ include "zoo-project-dru.fullname" . }}-kube-prometheus-alertmanager 9093:9093
  Open: http://localhost:9093
{{- end }}

üí° Monitoring Commands:
  # Get Grafana admin password
  kubectl get secret {{ include "zoo-project-dru.fullname" . }}-grafana -n {{ .Release.Namespace }} -o jsonpath='{.data.admin-password}' | base64 --decode
  
  # View Prometheus targets
  kubectl port-forward -n {{ .Release.Namespace }} svc/{{ include "zoo-project-dru.fullname" . }}-kube-prometheus-prometheus 9090:9090
  
  # Check node exporter metrics
  kubectl get pods -n {{ .Release.Namespace }} -l app.kubernetes.io/name=prometheus-node-exporter

{{- end }}
