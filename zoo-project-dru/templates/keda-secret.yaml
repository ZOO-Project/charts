{{- if and .Values.keda.enabled .Values.keda.scaleTargetRef }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "zoo-project-dru.fullname" . }}-keda-secret
  labels:
    {{- include "zoo-project-dru.labels" . | nindent 4 }}
data:
  # RabbitMQ connection details
  {{- $rabbitmqHost := printf "amqp://%s-rabbitmq.%s.svc.cluster.local:5672" (include "zoo-project-dru.fullname" .) .Release.Namespace }}
  host: {{ $rabbitmqHost | b64enc | quote }}
  username: {{ .Values.rabbitmq.auth.username | b64enc | quote }}
  password: {{ .Values.rabbitmq.auth.password | b64enc | quote }}
  
  # PostgreSQL connection details
  {{- if .Values.global.postgresql.auth.existingSecret }}
  # PostgreSQL password will be retrieved from existing secret
  # Note: KEDA will use the existing secret directly in the ScaledObject
  {{- else }}
  # PostgreSQL credentials from values
  pg_password: {{ .Values.global.postgresql.auth.password | b64enc | quote }}
  pg_username: {{ .Values.global.postgresql.auth.username | b64enc | quote }}
  pg_database: {{ .Values.global.postgresql.auth.database | b64enc | quote }}
  {{- if .Values.global.postgresql.service.ports.postgresql }}
  pg_port: {{ .Values.global.postgresql.service.ports.postgresql | b64enc | quote }}
  {{- else }}
  pg_port: {{ "5432" | b64enc | quote }}
  {{- end }}
  # PostgreSQL host (constructed from release name and namespace)
  {{- $pgHost := printf "%s-postgresql.%s.svc.cluster.local" (include "zoo-project-dru.fullname" .) .Release.Namespace }}
  pg_host: {{ $pgHost | b64enc | quote }}
  {{- end }}
{{- end }}
