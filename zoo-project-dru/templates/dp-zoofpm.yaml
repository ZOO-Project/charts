apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-zoofpm
  labels:
    {{- if .Chart.AppVersion }}
    app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
    {{- end }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/name: {{ .Release.Name }}-zoofpm
    app.kubernetes.io/instance: {{ .Release.Name }}-zoofpm
spec:
  {{- if not (or .Values.zoofpm.autoscaling.enabled .Values.keda.enabled) }}
  replicas: {{ .Values.zoofpm.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "zoo-project-dru.name" . }}-zoofpm
      app.kubernetes.io/instance: {{ .Release.Name }}-zoofpm
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
        {{- if .Values.keda.enabled }}
        # Pod protection with active workers (KEDA enabled)
        zoo-project.org/worker-protection: "enabled"
        zoo-project.org/scale-protection: "strict"
        # Annotation to identify critical pods
        zoo-project.org/prestop-protection: "active"
        # Initial state - will be updated dynamically by sidecar
        cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
        {{- end }}
        checksum/cm-cwlwrapper-assets: {{ include (print .Template.BasePath "/cm-cwlwrapper-assets.yaml") . | sha256sum }}
        checksum/cm-zoo-deploy-service-config: {{ include (print .Template.BasePath "/cm-zoo-deploy-service-config.yaml") . | sha256sum }}
        checksum/cm-zoo-project-config: {{ include (print .Template.BasePath "/cm-zoo-project-config.yaml") . | sha256sum }}
        checksum/cm-openapi-config: {{ include (print .Template.BasePath "/cm-openapi-config.yaml") . | sha256sum }}
      labels:
        app.kubernetes.io/name: {{ include "zoo-project-dru.name" . }}-zoofpm
        app.kubernetes.io/instance: {{ .Release.Name }}-zoofpm
    spec:
      {{- if .Values.keda.enabled }}
      terminationGracePeriodSeconds: 0  # 0 seconds for preStop script (not needed)
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ .Release.Name }}-processing-manager
      initContainers:
        - name: init-wait-for-dependencies-zoofpm
          image: docker.io/wshihadeh/wait_for:latest
          imagePullPolicy: IfNotPresent
          command: [ "/docker-entrypoint.sh" ]
          args: [ "wait_for", "rabbitmq:{{ .Release.Name }}-rabbitmq"]
          env:
            - name: ZOO_RABBITMQ_HOST
              value: {{ .Release.Name }}-rabbitmq
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        {{- if .Values.keda.enabled }}
        # Protection sidecar - Monitors active workers in real time (only when KEDA is enabled)
        - name: worker-protection-sidecar
          image: {{ .Values.keda.sidecar.image.repository }}:{{ .Values.keda.sidecar.image.tag }}
          imagePullPolicy: {{ .Values.keda.sidecar.image.pullPolicy }}
          resources: {{- toYaml .Values.keda.sidecar.resources | nindent 12 }}
          env:
            {{- if .Values.global.postgresql.auth.existingSecret }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgresql.auth.existingSecret }}
                  key: password
                  optional: true
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgresql.auth.existingSecret }}
                  key: username
                  optional: true
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgresql.auth.existingSecret }}
                  key: host
                  optional: true
            - name: PGDATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgresql.auth.existingSecret }}
                  key: database
                  optional: true
            {{- else }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgresql
                  key: password
            - name: PGUSER
              value: {{ .Values.global.postgresql.auth.username | quote}}
            - name: PGHOST
              value: "{{ .Release.Name}}-postgresql-hl"
            - name: PGDATABASE
              value: {{ .Values.global.postgresql.auth.database | quote}}
            {{- end }}
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                # If workers are active, be more lenient with readiness
                if [ -f /tmp/worker-protection-active ]; then
                  echo "Workers active - extended readiness tolerance"
                  test -f /tmp/sidecar-ready
                else
                  test -f /tmp/sidecar-ready
                fi
            initialDelaySeconds: 15
            periodSeconds: 30  # Plus conservateur sous charge
            timeoutSeconds: 10  # Timeout plus long
            successThreshold: 1
            failureThreshold: 10  # Plus tol√©rant
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                # If workers are active, be very lenient with liveness
                if [ -f /tmp/worker-protection-active ]; then
                  WORKER_COUNT=$(cat /tmp/active-worker-count 2>/dev/null || echo "0")
                  echo "üõ°Ô∏è  Protected pod with $WORKER_COUNT workers - skipping strict liveness check"
                  exit 0  # Always pass liveness when workers are active
                else
                  test -f /tmp/sidecar-ready
                fi
            initialDelaySeconds: 30
            periodSeconds: 60  # Plus d'espace entre les checks
            timeoutSeconds: 15  # Timeout plus long
            successThreshold: 1
            failureThreshold: 8  # Plus tol√©rant
          startupProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - "test -f /tmp/sidecar-ready"
            initialDelaySeconds: 30
            periodSeconds: 20
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 30  # 10 minutes max pour startup (30 * 20s)
        {{- end }}
        
        - env:
            - name: ORIGIN_NAMESPACE
              value: {{ .Release.Namespace }}
            - name: ZOO_RABBITMQ_HOST
              value: {{ .Release.Name }}-rabbitmq
            - name: STORAGE_CLASS
              value: {{ .Values.workflow.storageClass }}
            - name: DEFAULT_VOLUME_SIZE
              value: "{{ .Values.workflow.defaultVolumeSize }}"
            - name: DEFAULT_MAX_RAM
              value: "{{ .Values.workflow.defaultMaxRam }}"
            - name: DEFAULT_MAX_CORES
              value: "{{ .Values.workflow.defaultMaxCores }}"
            - name: CALRISSIAN_IMAGE
              value: "{{ .Values.workflow.calrissianImage }}"
            - name: WRAPPER_STAGE_IN
              value: "/assets/stagein.yaml"
            - name: WRAPPER_STAGE_OUT
              value: "/assets/stageout.yaml"
            - name: WRAPPER_RULES
              value: "/assets/rules.yaml"
            - name: WRAPPER_MAIN
              value: "/assets/main.yaml"
            {{- if .Values.useKubeProxy }}
            - name: HTTP_PROXY
              value: "http://{{ .Release.Name }}-kubeproxy.{{ .Release.Namespace }}.svc.cluster.local:8001"
            {{- else }}
            - name: KUBECONFIG
              value: /var/etc/ades/kubeconfig
            {{- end }}

            {{- if .Values.workflow.dedicatedNamespace.enabled }}
            - name: KEEP_SESSION
              value: "true"
            {{- if .Values.workflow.dedicatedNamespace.name }}
            - name: USE_NAMESPACE
              value: {{ .Values.workflow.dedicatedNamespace.name | quote }}
            {{- end }}
            {{- if .Values.workflow.dedicatedNamespace.serviceAccount }}
            - name: USE_SERVICE_ACCOUNT
              value: {{ .Values.workflow.dedicatedNamespace.serviceAccount | quote }}
            {{- end }}
            {{- end }}

            {{- if .Values.workflow.argo.enabled }}
            - name: ARGO_WF_STORAGE_CLASS
              value: {{ .Values.workflow.argo.storageClass  }}
            - name: ARGO_WF_DEFAULT_VOLUME_SIZE
              value: {{ .Values.workflow.argo.defaultVolumeSize }}
            - name: ARGO_WF_DEFAULT_MAX_CORES
              value: {{ .Values.workflow.argo.defaultMaxCores | toString }}
            - name: ARGO_WF_DEFAULT_MAX_RAM
              value: {{ .Values.workflow.argo.defaultMaxRam }}
            - name: ARGO_WF_NAMESPACE
              value: {{ .Values.workflow.argo.wfNamespace }}
            - name: ARGO_WF_ENDPOINT
              value: {{ .Values.workflow.argo.wfServer }}
            - name: ARGO_WF_TOKEN
              value: {{ .Values.workflow.argo.wfToken }}
            - name: ARGO_WF_SYNCHRONIZATION_CM
              value: {{ .Values.workflow.argo.wfSynchronizationCm }}
            - name: ARGO_CWL_RUNNER_TEMPLATE
              value: {{ .Values.workflow.argo.CwlRunnerTemplare }}
            - name: ARGO_CWL_RUNNER_ENTRYPOINT
              value: {{ .Values.workflow.argo.CwlRunnerEndpoint }}
            {{- end}}

            {{- if (.Values.global.postgresql.auth.existingSecret) }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgresql.auth.existingSecret }}
                  key: password
                  optional: true
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgresql.auth.existingSecret }}
                  key: username
                  optional: true
            - name: PGHOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgresql.auth.existingSecret }}
                  key: host
                  optional: true
            - name: PGPORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgresql.auth.existingSecret }}
                  key: port
                  optional: true
            - name: PGDATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.postgresql.auth.existingSecret }}
                  key: database
                  optional: true
            {{- else }}
            {{- if .Values.postgresql.defineEnvironmentVariables }}
            - name: PGHOST
              value: "{{ .Release.Name}}-postgresql-hl"
            - name: PGDATABASE
              value: {{ .Values.global.postgresql.auth.database | quote}}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgresql
                  key: password
            - name: PGUSER
              value: {{ .Values.global.postgresql.auth.username | quote}}
            - name: PGPORT
              value: {{ .Values.global.postgresql.service.ports.postgresql | quote}}
            {{- end }}
            {{- end }}

            {{- range $k, $v := .Values.workflow.inputs }}
            - name: {{ $k }}
              value: {{ $v }}
            {{- end }}


          name: zoofpm
          image: "{{ .Values.zoofpm.image.repository }}:{{ .Values.zoofpm.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.zoofpm.image.pullPolicy }}
          command: ["/startup.sh"]
          resources: {}
          volumeMounts:
            - name: zoo-project-config
              mountPath: /usr/lib/cgi-bin/main.cfg
              subPath: main.cfg
            
            - name: zoo-project-config
              mountPath: /usr/lib/cgi-bin/oas.cfg
              subPath: oas.cfg

            - name: zoo-project-config
              mountPath: /usr/lib/cgi-bin/security_service.py
              subPath: security_service.py

            - name: zoo-project-config
              mountPath: /assets/pod_imagePullSecrets.yaml
              subPath: pod_imagePullSecrets

            - name: zoo-project-config
              mountPath: /assets/pod_additionalImagePullSecrets.yaml
              subPath: pod_additionalImagePullSecrets

            - name: bin-config
              mountPath: /startup.sh
              subPath: start-up.sh

            - name: zoo-deploy-service-config
              mountPath: {{ .Values.persistence.tmpPath }}/cookiecutter_config.yaml
              subPath: cookiecutter_config.yaml

            - name: cwlwrapper-config
              mountPath: /assets/main.yaml
              subPath: main.yaml

            - name: cwlwrapper-config
              mountPath: /assets/rules.yaml
              subPath: rules.yaml

            - name: cwlwrapper-config
              mountPath: /assets/stagein.yaml
              subPath: stagein.yaml

            - name: cwlwrapper-config
              mountPath: /assets/stageout.yaml
              subPath: stageout.yaml

            - name: ades-processing-services
              mountPath: {{ .Values.persistence.servicesNamespacePath }}

            - name: tmp-folder
              mountPath: {{ .Values.persistence.tmpPath }}

            {{- range $v := .Values.zoofpm.extraMountPoints }}
            - name: {{ $v.name }}
              mountPath: {{ $v.mountPath }}
              subPath: {{ $v.subPath }}
            {{- end }}

      restartPolicy: Always
      volumes:
        - name: zoo-kernel-config
          configMap:
            name: {{ .Release.Name }}-zoo-kernel-config
        - name: openapi-config
          configMap:
            name: {{ .Release.Name }}-openapi-config
        - name: zoo-deploy-service-config
          configMap:
            name: {{ .Release.Name }}-zoo-deploy-service-config
        - name: cwlwrapper-config
          configMap:
            name: {{ .Release.Name }}-cwlwrapper-config
        - name: bin-config
          configMap:
            name: {{ .Release.Name }}-bin-config
            defaultMode: 0744
        - name: zoo-project-config
          configMap:
            name: {{ .Release.Name }}-zoo-project-config
        - name: tmp-folder
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-tmp-folder

        - name: ades-processing-services
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            {{- if .Values.persistence.existingProcessingServicesClaim }}
            claimName: {{ .Values.persistence.existingProcessingServicesClaim }}
            {{- else }}
            claimName: {{ .Release.Name }}-processing-services
            {{- end -}}
          {{- else }}
          emptyDir: { }
          {{- end }}
status: {}
